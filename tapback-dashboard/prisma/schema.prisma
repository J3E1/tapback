// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String  @id
  email         String  @unique
  password      String
  name          String?
  pricingPlanId String? @db.Uuid

  projects    Project[]
  sessions    Session[]
  pricingPlan PricingPlan? @relation(fields: [pricingPlanId], references: [id])

  createdAt DateTime @default(now())
}

model PricingPlan {
  id           String @id @default(uuid()) @db.Uuid
  reviewsLimit Int
  projectLimit Int
  name         Plan @default(BASIC)
  price        String // Price as a string to accommodate 'Custom' for Enterprise
  users        User[] // Relationship with the User model
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Rating {
  BAD // Represent 'Bad'
  DECENT // Represent 'Decent'
  LOVE_IT // Represent 'Love it!'
}
enum Plan {
  BASIC // Represent 'Basic'
  PRO // Represent 'Pro'
  ENTERPRISE // Represent 'Enterprise'
}

model Widget {
  id              String   @id @default(uuid()) @db.Uuid
  projectId       String   @unique @db.Uuid // This links the widget to a project
  backgroundColor String   @default("0 0% 100%")
  primaryColor    String   @default("240 5.9% 10%")
  typographyColor String   @default("240 5.9% 10%")
  radius          String   @default("0.5rem")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String
  name        String
  siteUrl     String
  embedCode   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  widget  Widget? // A project can have one widget
  reviews Review[] // A project can have many reviews
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id          Int      @id @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String   @db.Uuid
  email       String
  feedback    String? // Feedback content
  rating      Rating
  submittedAt DateTime @default(now())
}
